name: Production Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: "SHA of version to promote from dev"
        required: true

jobs:
  detect-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.get-services.outputs.services }}
    permissions:
      contents: read
      actions: read
    steps:
      - name: Debug Context
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Owner: ${{ github.repository_owner }}"
          echo "SHA: ${{ inputs.version }}"

      - id: get-services
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
              
              console.log('Repository context:', {
                owner: owner,
                repo: repo,
                sha: '${{ inputs.version }}'
              });

              // Get all workflows
              const { data: workflows } = await github.rest.actions.listRepoWorkflows({
                owner: owner,
                repo: repo
              });
              
              // First check manual deploy workflow
              const manualWorkflow = workflows.workflows.find(w => 
                w.path === '.github/workflows/dev-manual-deploy.yml'
              );

              let deployedServices = [];

              if (manualWorkflow) {
                console.log('Checking manual workflow first');
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner: owner,
                  repo: repo,
                  workflow_id: manualWorkflow.id,
                  status: 'completed',
                  conclusion: 'success'
                });

                // Find the exact run with matching SHA
                const matchingRun = runs.workflow_runs.find(run => 
                  run.head_sha === '${{ inputs.version }}'
                );

                if (matchingRun) {
                  console.log('Found matching manual deployment run:', matchingRun.id);
                  
                  const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                    owner: owner,
                    repo: repo,
                    run_id: matchingRun.id
                  });
                  
                  // Extract only the build-and-deploy jobs
                  deployedServices = jobs.jobs
                    .filter(job => job.name.includes('build-and-deploy'))
                    .map(job => {
                      const match = job.name.match(/build-and-deploy \(([^)]+)\)/);
                      return match ? match[1].trim() : null;
                    })
                    .filter(Boolean);
                }
              }

              // Only check automatic workflow if no manual deployment was found
              if (deployedServices.length === 0) {
                console.log('No manual deployment found, checking automatic workflow');
                const autoWorkflow = workflows.workflows.find(w => 
                  w.path === '.github/workflows/dev-deploy.yml'
                );

                if (autoWorkflow) {
                  const { data: runs } = await github.rest.actions.listWorkflowRuns({
                    owner: owner,
                    repo: repo,
                    workflow_id: autoWorkflow.id,
                    status: 'completed',
                    conclusion: 'success'
                  });

                  // Find the exact run with matching SHA
                  const matchingRun = runs.workflow_runs.find(run => 
                    run.head_sha === '${{ inputs.version }}'
                  );

                  if (matchingRun) {
                    console.log('Found matching automatic deployment run:', matchingRun.id);
                    
                    const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                      owner: owner,
                      repo: repo,
                      run_id: matchingRun.id
                    });
                    
                    // Extract only the build-and-deploy jobs
                    deployedServices = jobs.jobs
                      .filter(job => job.name.includes('build-and-deploy'))
                      .map(job => {
                        const match = job.name.match(/build-and-deploy \(([^)]+)\)/);
                        return match ? match[1].trim() : null;
                      })
                      .filter(Boolean);
                  }
                }
              }
              
              console.log('Final services to deploy:', deployedServices);
              core.setOutput('services', JSON.stringify(deployedServices));
              
            } catch (error) {
              console.error('Error:', error);
              core.setOutput('services', '[]');
              core.setFailed(error.message);
            }

  deploy:
    needs: detect-services
    if: fromJson(needs.detect-services.outputs.services) != '[]'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      deployments: write
      issues: write
      actions: read
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-services.outputs.services) }}

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Kubernetes Prod
        run: |
          SERVICE=$(echo "${{ matrix.service }}" | tr -d '\n\r')

          kubectl config set-cluster kubernetes --server=${{ secrets.K8S_SERVER_PROD }}
          kubectl config set clusters.kubernetes.certificate-authority-data ${{ secrets.K8S_CERT_PROD }}
          kubectl config set-credentials kubernetes-admin --token=${{ secrets.K8S_TOKEN_PROD }}
          kubectl config set-context kubernetes-admin@kubernetes --cluster=kubernetes --user=kubernetes-admin
          kubectl config use-context kubernetes-admin@kubernetes

          kubectl apply -f ./${SERVICE}/k8s/prod/${SERVICE}-depl.yaml
          kubectl set image deployment/${SERVICE}-depl ${SERVICE}=${{ secrets.DOCKER_USERNAME }}/${SERVICE}:${{ inputs.version }}
          kubectl rollout status deployment/${SERVICE}-depl

      - name: Verify Deployment
        run: |
          SERVICE=$(echo "${{ matrix.service }}" | tr -d '\n\r')
          kubectl get pods | grep ${SERVICE}
          kubectl get service ${SERVICE}-srv

      - name: Verify Dev Deployment Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const service = '${{ matrix.service }}';
              // Get repository name from environment variable
              const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
              
              console.log('Checking deployment for:', {
                owner: owner,
                repo: repo,
                service: service,
                sha: '${{ inputs.version }}'
              });
              
              // Get all workflows
              const { data: workflows } = await github.rest.actions.listRepoWorkflows({
                owner: owner,
                repo: repo
              });
              
              console.log('Available workflows:', workflows.workflows.map(w => w.path));
              
              // Find both automatic and manual deploy workflows
              const devWorkflows = workflows.workflows.filter(w => 
                w.path === '.github/workflows/dev-deploy.yml' || 
                w.path === '.github/workflows/dev-manual-deploy.yml'
              );
              
              if (devWorkflows.length === 0) {
                throw new Error('No deployment workflows found');
              }
              
              // Check each workflow for successful deployments
              let serviceDeployed = false;
              
              for (const workflow of devWorkflows) {
                console.log(`Checking workflow: ${workflow.path}`);
                
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner: owner,
                  repo: repo,
                  workflow_id: workflow.id,
                  status: 'completed',
                  conclusion: 'success'
                });
                
                // Find the run with matching SHA
                const devDeployment = runs.workflow_runs.find(run => 
                  run.head_sha === '${{ inputs.version }}'
                );
                
                if (devDeployment) {
                  console.log(`Found matching deployment in ${workflow.path}:`, devDeployment.id);
                  
                  // Get the jobs for this run
                  const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                    owner: owner,
                    repo: repo,
                    run_id: devDeployment.id
                  });
                  
                  const serviceJob = jobs.jobs.find(job => 
                    job.name.includes(`build-and-deploy (${service}`)
                  );
                  
                  if (serviceJob && serviceJob.conclusion === 'success') {
                    serviceDeployed = true;
                    console.log(`Verified successful dev deployment for ${service} in ${workflow.path}`);
                    break;
                  }
                }
              }
              
              if (!serviceDeployed) {
                core.setFailed(`Service ${service} was not successfully deployed to dev`);
              }
              
            } catch (error) {
              console.error('Error checking deployment:', error);
              core.setFailed(error.message);
            }

      - name: Create Production Deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const service = '${{ matrix.service }}';
              const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
              
              console.log('Creating production deployment:', {
                owner: owner,
                repo: repo,
                service: service,
                sha: '${{ inputs.version }}'
              });

              await github.rest.repos.createDeployment({
                owner: owner,
                repo: repo,
                ref: '${{ inputs.version }}',
                environment: 'production',
                task: service,
                auto_merge: false,
                required_contexts: [] // Add this to bypass status checks
              });
              
              console.log('Successfully created production deployment');
            } catch (error) {
              console.error('Error creating deployment:', error);
              core.setFailed(error.message);
            }

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const status = '${{ job.status }}';
              const service = '${{ matrix.service }}';
              const version = '${{ inputs.version }}';
              const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
              
              console.log('Notifying deployment status:', {
                owner: owner,
                repo: repo,
                service: service,
                status: status,
                version: version
              });
              
              // Create a new issue for the deployment status
              const { data: issue } = await github.rest.issues.create({
                owner: owner,
                repo: repo,
                title: `Production Deployment Status: ${service}`,
                body: `
                # Production Deployment Status
                
                - **Service**: ${service}
                - **Status**: ${status}
                - **Version**: ${version}
                - **Deployment Time**: ${new Date().toISOString()}
                
                This is an automated deployment status notification.
                `
              });
              
              console.log('Created deployment status issue:', issue.html_url);
              
            } catch (error) {
              console.error('Error creating deployment notification:', error);
              // Don't fail the workflow for notification errors
              console.log('Failed to create notification:', error.message);
            }
